{"ast":null,"code":"import config from '../config/youtube';\nclass YouTubeService {\n  constructor() {\n    this.apiKey = config.youtube.apiKey;\n    this.channelId = config.youtube.channelId;\n  }\n\n  // Buscar transmissões ao vivo\n  async getLiveStreams() {\n    if (!this.apiKey) {\n      return this.getFallbackData();\n    }\n    try {\n      const response = await fetch(`${config.youtube.baseUrl}/search?key=${this.apiKey}&channelId=${this.channelId}&eventType=live&type=video&part=snippet&maxResults=1`);\n      if (!response.ok) throw new Error('API Error');\n      return await response.json();\n    } catch (error) {\n      console.error('YouTube API Error:', error);\n      return this.getFallbackData();\n    }\n  }\n\n  // Buscar vídeos recentes\n  async getRecentVideos(maxResults = 6) {\n    if (!this.apiKey) {\n      return this.getFallbackVideos();\n    }\n    try {\n      const response = await fetch(`${config.youtube.baseUrl}/search?key=${this.apiKey}&channelId=${this.channelId}&order=date&type=video&part=snippet&maxResults=${maxResults}`);\n      if (!response.ok) throw new Error('API Error');\n      const data = await response.json();\n\n      // Buscar detalhes dos vídeos\n      return await this.getVideoDetails(data.items);\n    } catch (error) {\n      console.error('YouTube API Error:', error);\n      return this.getFallbackVideos();\n    }\n  }\n\n  // Buscar detalhes dos vídeos\n  async getVideoDetails(videos) {\n    const videoIds = videos.map(item => item.id.videoId).join(',');\n    const response = await fetch(`${config.youtube.baseUrl}/videos?key=${this.apiKey}&id=${videoIds}&part=contentDetails,statistics`);\n    const detailsData = await response.json();\n    return videos.map((item, index) => {\n      var _detailsData$items$in, _detailsData$items$in2, _detailsData$items$in3, _detailsData$items$in4;\n      return {\n        id: item.id.videoId,\n        titulo: item.snippet.title,\n        data: new Date(item.snippet.publishedAt).toLocaleDateString('pt-BR'),\n        descricao: item.snippet.description,\n        thumbnail: item.snippet.thumbnails.medium.url,\n        videoId: item.id.videoId,\n        duracao: ((_detailsData$items$in = detailsData.items[index]) === null || _detailsData$items$in === void 0 ? void 0 : (_detailsData$items$in2 = _detailsData$items$in.contentDetails) === null || _detailsData$items$in2 === void 0 ? void 0 : _detailsData$items$in2.duration) || 'PT0M0S',\n        visualizacoes: ((_detailsData$items$in3 = detailsData.items[index]) === null || _detailsData$items$in3 === void 0 ? void 0 : (_detailsData$items$in4 = _detailsData$items$in3.statistics) === null || _detailsData$items$in4 === void 0 ? void 0 : _detailsData$items$in4.viewCount) || '0'\n      };\n    });\n  }\n\n  // Fallback se API falhar\n  getFallbackData() {\n    return {\n      items: []\n    };\n  }\n  getFallbackVideos() {\n    // Vídeos fixos de fallback\n    return [{\n      id: 'fallback1',\n      titulo: 'Culto da Igreja AD Cavallari',\n      data: new Date().toLocaleDateString('pt-BR'),\n      videoId: 'dQw4w9WgXcQ',\n      thumbnail: '/images/fallback-thumbnail.jpg',\n      duracao: 'PT1H0M0S',\n      visualizacoes: '1000'\n    }];\n  }\n}\nexport default new YouTubeService();","map":{"version":3,"names":["config","YouTubeService","constructor","apiKey","youtube","channelId","getLiveStreams","getFallbackData","response","fetch","baseUrl","ok","Error","json","error","console","getRecentVideos","maxResults","getFallbackVideos","data","getVideoDetails","items","videos","videoIds","map","item","id","videoId","join","detailsData","index","_detailsData$items$in","_detailsData$items$in2","_detailsData$items$in3","_detailsData$items$in4","titulo","snippet","title","Date","publishedAt","toLocaleDateString","descricao","description","thumbnail","thumbnails","medium","url","duracao","contentDetails","duration","visualizacoes","statistics","viewCount"],"sources":["C:/Users/Toccini/Videos/Site Igreja/src/services/youtubeService.js"],"sourcesContent":["import config from '../config/youtube';\r\n\r\nclass YouTubeService {\r\n  constructor() {\r\n    this.apiKey = config.youtube.apiKey;\r\n    this.channelId = config.youtube.channelId;\r\n  }\r\n\r\n  // Buscar transmissões ao vivo\r\n  async getLiveStreams() {\r\n    if (!this.apiKey) {\r\n      return this.getFallbackData();\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `${config.youtube.baseUrl}/search?key=${this.apiKey}&channelId=${this.channelId}&eventType=live&type=video&part=snippet&maxResults=1`\r\n      );\r\n      \r\n      if (!response.ok) throw new Error('API Error');\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('YouTube API Error:', error);\r\n      return this.getFallbackData();\r\n    }\r\n  }\r\n\r\n  // Buscar vídeos recentes\r\n  async getRecentVideos(maxResults = 6) {\r\n    if (!this.apiKey) {\r\n      return this.getFallbackVideos();\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `${config.youtube.baseUrl}/search?key=${this.apiKey}&channelId=${this.channelId}&order=date&type=video&part=snippet&maxResults=${maxResults}`\r\n      );\r\n      \r\n      if (!response.ok) throw new Error('API Error');\r\n      const data = await response.json();\r\n      \r\n      // Buscar detalhes dos vídeos\r\n      return await this.getVideoDetails(data.items);\r\n    } catch (error) {\r\n      console.error('YouTube API Error:', error);\r\n      return this.getFallbackVideos();\r\n    }\r\n  }\r\n\r\n  // Buscar detalhes dos vídeos\r\n  async getVideoDetails(videos) {\r\n    const videoIds = videos.map(item => item.id.videoId).join(',');\r\n    \r\n    const response = await fetch(\r\n      `${config.youtube.baseUrl}/videos?key=${this.apiKey}&id=${videoIds}&part=contentDetails,statistics`\r\n    );\r\n    \r\n    const detailsData = await response.json();\r\n    \r\n    return videos.map((item, index) => ({\r\n      id: item.id.videoId,\r\n      titulo: item.snippet.title,\r\n      data: new Date(item.snippet.publishedAt).toLocaleDateString('pt-BR'),\r\n      descricao: item.snippet.description,\r\n      thumbnail: item.snippet.thumbnails.medium.url,\r\n      videoId: item.id.videoId,\r\n      duracao: detailsData.items[index]?.contentDetails?.duration || 'PT0M0S',\r\n      visualizacoes: detailsData.items[index]?.statistics?.viewCount || '0'\r\n    }));\r\n  }\r\n\r\n  // Fallback se API falhar\r\n  getFallbackData() {\r\n    return { items: [] };\r\n  }\r\n\r\n  getFallbackVideos() {\r\n    // Vídeos fixos de fallback\r\n    return [\r\n      {\r\n        id: 'fallback1',\r\n        titulo: 'Culto da Igreja AD Cavallari',\r\n        data: new Date().toLocaleDateString('pt-BR'),\r\n        videoId: 'dQw4w9WgXcQ',\r\n        thumbnail: '/images/fallback-thumbnail.jpg',\r\n        duracao: 'PT1H0M0S',\r\n        visualizacoes: '1000'\r\n      }\r\n    ];\r\n  }\r\n}\r\n\r\nexport default new YouTubeService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}